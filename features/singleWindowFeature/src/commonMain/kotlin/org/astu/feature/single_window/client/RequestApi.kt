/**
 * gateway API
 * gateway API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.astu.feature.single_window.client

import io.ktor.client.call.body
import io.ktor.client.request.delete
import io.ktor.client.request.forms.*
import io.ktor.client.request.get
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.http.*
import org.astu.feature.single_window.client.models.AddRequestDTO
import org.astu.feature.single_window.client.models.AddRequirementTypeDTO
import org.astu.feature.single_window.client.models.AddTemplateDTO
import org.astu.feature.single_window.client.models.FailRequestDTO
import org.astu.feature.single_window.client.models.RequestDTO
import org.astu.feature.single_window.client.models.RequirementTypeDTO
import org.astu.feature.single_window.client.models.TemplateDTO
import org.astu.infrastructure.DependencyInjection.GlobalDIContext
import org.astu.infrastructure.JavaSerializable
import org.astu.infrastructure.SecurityHttpClient

class RequestApi(private val baseUrl: String = "/") : JavaSerializable {
    private val securityHttpClient by GlobalDIContext.inject<SecurityHttpClient>()
    private val client = securityHttpClient.instance

    /**
     *
     * Получение списка типов запросов для работника отдела
     * @return kotlin.Array<RequestDTO>
     */
    suspend fun apiRequestServiceEmployeeRequestGet(): List<RequestDTO> {
        val response = client.get("${baseUrl}api/request-service/employee/request")

        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<RequestDTO>>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Отклонение заявки пользователя
     * @param body
     * @param id
     * @return kotlin.Any
     */
    suspend fun apiRequestServiceEmployeeRequestIdFailPost(body: FailRequestDTO, id: String) {
        val response = client.post("${baseUrl}api/request-service/employee/request/$id/fail") {
            contentType(ContentType.Application.Json)
            setBody(body)
        }

        when (response.status) {
            HttpStatusCode.OK -> {}
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Одобрение заявки пользователя
     * @param id
     * @return kotlin.Any
     */
    suspend fun apiRequestServiceEmployeeRequestIdSuccessPost(id: String, filename: String, file: ByteArray): Unit {
        val response = client.submitFormWithBinaryData(
            url = "${baseUrl}api/request-service/employee/request/$id/success",
            formData = formData {
                append("files", file, Headers.build {
                    append(HttpHeaders.ContentDisposition, "filename=$filename")
                })
            })

        return when (response.status) {
            HttpStatusCode.OK -> response.body<Unit>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Удаление запроса
     * @param id
     * @return Unit
     */
    suspend fun apiRequestServiceUserRequestIdDelete(id: String) {
        val response = client.delete("${baseUrl}api/request-service/user/request/$id")

        when (response.status) {
            HttpStatusCode.OK -> {}
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Добавление запроса
     * @param body
     * @return java.util.UUID
     */
    suspend fun apiRequestServiceUserRequestPost(body: AddRequestDTO): String {
        val response = client.post("${baseUrl}api/request-service/user/request") {
            contentType(ContentType.Application.Json)
            setBody(body)
        }

        return when (response.status) {
            HttpStatusCode.OK -> response.body<String>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Получение списка типов требований
     * @return kotlin.Array<RequirementTypeDTO>
     */
    suspend fun apiRequestServiceRequirementTypesGet(): List<RequirementTypeDTO> {
        val response = client.get("${baseUrl}api/request-service/requirement-types")

        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<RequirementTypeDTO>>()
            else -> throw RuntimeException()
        }
    }

    /**
     * Добавление нового типа требований
     *
     * @param body
     * @return RequirementTypeDTO
     */
    @Deprecated("")
    suspend fun apiRequestServiceRequirementTypesPost(body: AddRequirementTypeDTO): RequirementTypeDTO {
        val response = client.post("${baseUrl}api/request-service/requirement-types") {
            setBody(body)
        }

        return when (response.status) {
            HttpStatusCode.OK -> response.body<RequirementTypeDTO>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Получение списка шаблонов для пользователя
     * @return kotlin.Array<TemplateDTO>
     */
    suspend fun apiRequestServiceTemplateGet(): List<TemplateDTO> {
        val response = client.get("${baseUrl}api/request-service/template")
        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<TemplateDTO>>()
            else -> throw RuntimeException()
        }
    }

    /**
     * Добавление шаблона
     *
     * @param body
     * @return java.util.UUID
     */
    suspend fun apiRequestServiceTemplatePost(body: AddTemplateDTO): String {
        val response = client.post("${baseUrl}api/request-service/template") {
            contentType(ContentType.Application.Json)
            setBody(body)
        }

        return when (response.status) {
            HttpStatusCode.OK -> response.body<String>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Получение списка запросов пользователя
     * @return kotlin.Array<RequestDTO>
     */
    suspend fun apiRequestServiceUserRequestGet(): List<RequestDTO> {
        val response = client.get("${baseUrl}api/request-service/user/request")

        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<RequestDTO>>()
            else -> throw RuntimeException()
        }
    }
}

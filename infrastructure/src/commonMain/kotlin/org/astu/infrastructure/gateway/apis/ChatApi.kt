/**
 * gateway API
 * gateway API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package org.astu.infrastructure.gateway.apis

import io.ktor.client.call.body
import io.ktor.client.request.get
import io.ktor.client.request.parameter
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.http.HttpStatusCode
import io.swagger.client.models.AddMessageDTO
import kotlinx.datetime.Instant
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import org.astu.infrastructure.DependencyInjection.GlobalDIContext
import org.astu.infrastructure.SecurityHttpClient
import org.astu.infrastructure.gateway.models.AddChatDTO
import org.astu.infrastructure.gateway.models.AddUserDTO
import org.astu.infrastructure.gateway.models.MessageDTO

class ChatApi(private val baseUrl: String = "/") {
    private val securityHttpClient by GlobalDIContext.inject<SecurityHttpClient>()
    private val client = securityHttpClient.instance

    /**
     *
     * Постраничная выдача сообщений
     * @param chatId
     * @param page
     * @param elements  (optional)
     * @return kotlin.Array<MessageDTO>
     */
    suspend fun apiChatServiceChatsChatIdMessagesPageGet(
        chatId: String,
        page: Int,
        elements: Int? = null
    ): List<MessageDTO> {
        val response = client.get("${baseUrl}api/chat-service/chats/$chatId/messages/page") {
            if (elements != null)
                parameter("elements", elements)
            parameter("page", page)
        }
        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<MessageDTO>>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Выдача сообщений по времени
     * @param chatId
     * @param datetime  (optional)
     * @return kotlin.Array<MessageDTO>
     */
    suspend fun apiChatServiceChatsChatIdMessagesTimeGet(
        chatId: String,
        datetime: Instant
    ): List<MessageDTO> {
        val response = client.get("${baseUrl}api/chat-service/chats/$chatId/messages/time") {
            parameter("datetime", Json.encodeToString(datetime))
        }
        return when (response.status) {
            HttpStatusCode.OK -> response.body<List<MessageDTO>>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Отправка сообщения
     * @param body
     * @param chatId
     * @return kotlin.String
     */
    suspend fun apiChatServiceChatsChatIdMessagesPost(body: AddMessageDTO, chatId: String): String {
        val response = client.post("${baseUrl}api/chat-service/chats/$chatId/messages") {
            setBody(body)
        }
        return when (response.status) {
            HttpStatusCode.OK -> response.body<String>()
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Добавление пользователя в чат
     * @param body
     * @param chatId
     * @return Unit
     */
    suspend fun apiChatServiceChatsChatIdUsersPost(body: AddUserDTO, chatId: String) {
        val response = client.post("${baseUrl}api/chat-service/chats/$chatId/users") {
            setBody(body)
        }

        when (response.status) {
            HttpStatusCode.OK -> {}
            else -> throw RuntimeException()
        }
    }

    /**
     *
     * Добавление чата
     * @param body
     * @return kotlin.String
     */
    suspend fun apiChatServiceChatsPost(body: AddChatDTO): String {
        val response = client.post("${baseUrl}api/chat-service/chats") {
            setBody(body)
        }

        return when (response.status) {
            HttpStatusCode.OK -> response.body<String>()
            else -> throw RuntimeException()
        }
    }
}
